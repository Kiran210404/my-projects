#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct scholarship {
    char name[100];
    int roll;
    char category[10];
    float amount;
    int income;
};

void display(struct scholarship* m, int n) {
    for (int i = 0; i < n; i++) {
        printf("\nStudent %d", i + 1);
        printf("\nName: %s", m[i].name);
        printf("\nRoll No.: %d", m[i].roll);
        printf("\nCategory: %s", m[i].category);
        printf("\nAmount: %.2f\n\n", m[i].amount); 
    }
    printf("\n");
}

void sort_by_amount(struct scholarship* m, int n) {
    struct scholarship temp;

    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (m[j].amount < m[j + 1].amount) {
                temp = m[j];
                m[j] = m[j + 1];
                m[j + 1] = temp;
            }
        }
    }
}

void sort_by_rollno(struct scholarship* m, int n) {
    struct scholarship temp;
     
    printf("\n\nStudents in descending order of roll no.\n");
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (m[i].roll < m[j].roll) {
                temp = m[i];
                m[i] = m[j];
                m[j] = temp;
            }
        }
    }
    display(m, n);
    
}

int search_by_rollno(struct scholarship* m, int n, int roll_no) {
    int l = 0, r = n - 1;

    while (l <= r) {
        int mid = (l + r) / 2;
        if (m[mid].roll == roll_no) {
            return mid;
        } else if (m[mid].roll < roll_no) {
            l = mid + 1;
        } else {
            r = mid - 1;
        }
    }
    return -1;
}

void search_by_Name(struct scholarship* m, int n, char* Name) {
    int found = 0;
    for (int i = 0; i < n; ++i) {
        if (strcmp(m[i].name, Name) == 0) {
            found = 1;
            printf("Roll number: %d\n", m[i].roll);
            printf("Name: %s\n", m[i].name);
            printf("Amount: %.2f\n", m[i].amount);
            printf("Category: %s\n", m[i].category);
            break;
        }
    }

    if (!found) {
        printf("\nRecord not found!!!");
    }
}

int check_eligibility(struct scholarship s) {
    if (s.income < 800000) {
        return 1; // Eligible for scholarship
    } else {
        return 0; // Not eligible for scholarship
    }
}

int main() {
    int n;
    printf("\nWELCOME TO SCHOLARSHIP PORTAL!!!\n\nDetails of students availing scholarship.");
    printf("\nEnter the number of students: ");
    scanf("%d", &n);

    struct scholarship m[n];
    for (int i = 0; i < n; i++) {
        printf("\nEnter the name of student: ");
        scanf("%s", m[i].name);
        printf("Roll No.: ");
        scanf("%d", &m[i].roll);
        printf("Enter the category of scholarship: ");
        scanf("%s", m[i].category);
        printf("Enter the scholarship amount: ");
        scanf("%f", &m[i].amount);
        printf("Enter the income: ");
        scanf("%d", &m[i].income);
    }

    int choice, index, roll_no;
    char Name[100];
    do {
        printf("\n\n1. Display the details of students availing scholarship.\n");
        printf("2. Display data in descending order of amount.\n");
        printf("3. Display the data in descending order of roll no.\n");
        printf("4. Search the student by entering name.\n");
        printf("5. Search student by roll no.\n");
        printf("6. Check eligibility for scholarship.\n");
        printf("7. Exit the portal!!\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                display(m, n);
                break;

            case 2:
                sort_by_amount(m, n);
                printf("\nStudent details in descending order of amount:\n");
                display(m, n);
                break;

            case 3:
                sort_by_rollno(m, n);
                break;

            case 4:
                printf("\nEnter the student name to search: ");
                scanf("%s", Name);
                search_by_Name(m, n, Name);
                break;

            case 5:
                printf("\nEnter the roll number to search: ");
                scanf("%d", &roll_no);
                
                index = search_by_rollno(m, n, roll_no);

                if (index == -1) {
                    printf("\nRoll No %d not found.\n", roll_no);
                } else {
                    printf("\nDetails of Roll No %d:\n", roll_no);
                    printf("Name: %s\n", m[index].name);
                    printf("Roll No.: %d\n", m[index].roll);
                    printf("Category: %s\n", m[index].category);
                    printf("Amount: %.2f\n", m[index].amount);
                }
                break;

             case 6:
                printf("\nEnter the roll number to check eligibility: ");
                scanf("%d", &roll_no);
                
                index = search_by_rollno(m, n, roll_no);

                if (index == -1) {
                    printf("\nRoll No %d not found.\n", roll_no);
                } else {
                    printf("\nDetails of Roll No %d:\n", roll_no);
                    printf("Name: %s\n", m[index].name);
                    printf("Roll No.: %d\n", m[index].roll);
                    printf("Category: %s\n", m[index].category);
                    printf("Amount: %.2f\n", m[index].amount);

                    int eligibility = check_eligibility(m[index]);
                    if (eligibility) {
                        printf("The student is eligible for the scholarship.\n");
                    } else {
                        printf("The student is not eligible for the scholarship.\n");
                    }
                }
                break;

            case 7:
                printf("\nTHANK YOU FOR VISITING PORTAL!!!\n");
                break;

            default:
                printf("\nEnter a valid choice!!\n");
                break;
        }
    } while (choice != 7);
return 0;
}
